Solution 1

class Solution {
    public int[] productExceptSelf(int[] nums) {

         int n=nums.length;
        int left[]=new int[nums.length];
         int right[]=new int[nums.length];
        int result[]=new int[nums.length];
         //left product
         left[0]=1;
         for(int i=1;i<n;i++)
         {
             left[i]=nums[i-1]*left[i-1];
         }  

         //right product
         right[n-1]=1;
        for(int j=n-2;j>=0;j--)
        {
             right[j]=nums[j+1]*right[j+1];
        } 

         //multiply
         for(int k=0;k<n;k++)
         {
             result[k]=left[k]*right[k];
         } 
         return result   ; 


}
}
 
Note: in solution 1 space compliexity is o(n) 

solution 2:

class Solution {
    public int[] productExceptSelf(int[] nums) {

         int n = nums.length;
        int[] result = new int[n];
        
        // Step 1: Compute left products directly in result[]
        result[0] = 1;  // No elements to the left of the first element
        for (int i = 1; i < n; i++) {
            result[i] = nums[i - 1] * result[i - 1];
        }
        
        // Step 2: Compute right products on the fly and update result[]
        int rightProduct = 1;  // No elements to the right of the last element
        for (int i = n - 1; i >= 0; i--) {
            result[i] = result[i] * rightProduct;
            rightProduct *= nums[i];
        }
        
        return result;
    }
}

 
Note: in solution 2 space compliexity is o(1) 

